#!/bin/bash

FILE=/volatilefs.img
SIZE=`expr 64 \* 1024 \* 1024`  # 64 MB
MNT=/mnt/volatilefs


function create_key_file()
{
	local keyfile=$1
	local secret="hostid="`hostid`
	local netif=<%= $::bobcat::volatilefs::interface %>

	local mac_address=$(ethtool -P $netif | awk '{print $3}' | sed 's/://g')
	if [ -n "${mac_address}" ]; then
		secret="${secret} mac=${mac_address}"
	else
		>&1 echo "No local MAC address found"
	fi

	local default_gw_ip=$(ip route list | grep default | awk '{print $3}')
	if [ -n "$default_gw_ip" ]; then
		local tries=10
		while [ $tries -gt 0 ]; do
			ping -n -c 3 $default_gw_ip >/dev/null
			local default_gw_mac=$(ip neigh show $default_gw_ip | awk '{print $5}' | sed 's/://g')
			if [ -n "${default_gw_mac}" ]; then
				break
			fi
			tries=`expr $tries - 1`
			>&1 echo "No default gateway MAC found, $tries tries left"
		done
		if [ -n "${default_gw_mac}" ]; then
			secret="${secret} gw=${default_gw_mac}"
		else
			>&1 echo "No gateway MAC address found"
		fi
	fi

<% if $facts[$::bobcat::facts::xid_fact] { -%>
	local xid="<%= $facts[$::bobcat::facts::xid_fact] %>"
	if [ -n "${xid}" ]; then
		secret="${secret} xid=${xid}"
	else
		>&1 echo "No XID found"
	fi
<% } -%>

	>&2 echo "Key derivation input: $secret"
	echo $secret | openssl sha256 -binary > $keyfile
}

function create_container()
{
	local loop_device=$1
	local keyfile=$2
	local mapper=$3
	local mountpoint=$4

	cryptsetup luksFormat --batch-mode $loop_device $keyfile
	cryptsetup luksOpen --key-file $keyfile $loop_device $(basename $mapper)
	mkfs.ext4 $mapper
	mount $mapper $mountpoint
<% if $::bobcat::volatilefs::init_command { -%>
	<%= $::bobcat::volatilefs::init_command %>
<% } -%>
}

function mount_container()
{
	local image=$1
	local mountpoint=$2
	local size=$3

	local mapper_device=$(mount | grep $mountpoint | awk '{print $1}')
	if [ -e "$mapper_device" ]; then
		echo "$image already mounted"
		exit 1
	fi

	if [ ! -d $mountpoint ]; then
		mkdir $mountpoint
	fi

	if [ ! -f $image ]; then
		echo "$image not found, creating new"
		dd if=/dev/zero of=$image bs=1 count=0 seek=$size
	fi

	local mapper=$(mktemp -up /dev/mapper)
	local loop_device=$(losetup --find --show $image)

	local keyfile=$(mktemp /run/volatilefs_XXXXXXXX)
	create_key_file $keyfile

	cryptsetup luksOpen --key-file $keyfile $loop_device $(basename $mapper)

	if [ $? -eq 0 ]; then
		echo "Trying to mount $image on $mountpoint"
		mount $mapper $mountpoint
		if [ $? -eq 0 ]; then
			echo "Mount failed, recreating $image"
			cryptsetup luksClose $mapper
			create_container $loop_device $keyfile $mapper $mountpoint
		fi
		echo "$image mounted on $mountpoint"
	else
		echo "$image not readable, recreating"
		create_container $loop_device $keyfile $mapper $mountpoint
	fi

	rm -f $keyfile
	exit 0
}

function umount_container()
{
	local image=$1
	local mountpoint=$2

	local mapper_device=$(mount | grep $mountpoint | awk '{print $1}')
	if [ ! -e "$mapper_device" ]; then
		echo "$image not mounted"
		exit 1
	fi

	local mapper=$(basename $mapper_device)
	local loop_device=$(cryptsetup status $mapper | grep device | awk '{print $2}')

	umount $mountpoint
	cryptsetup luksClose $mapper
	losetup -d $loop_device

	echo "$image no longer mounted"
	exit 0
}


if [ ! -f /sbin/cryptsetup ]; then
	echo "FATAL ERROR: cryptsetup not found"
	exit 1
fi

case $1 in
mount)
	mount_container $FILE $MNT $SIZE
	;;
umount)
	umount_container $FILE $MNT
	;;
*)
	echo "usage: $0 [mount|umount]"
	exit 1
esac
